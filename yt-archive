#!/usr/bin/env bash
#
# Archive a YouTube entity, saving as much data as possible.
#
# Requires: youtube-dl
#
# Note that the youtube-dl default video format code is
# bestvideo+bestaudio/best, but we define it ourselves since it can't be trusted
# not to change.
#

_BASHPLATE_DIR="$HOME/.local/share/bashplate"
source "$_BASHPLATE_DIR/bashplate.sh"

_usage="\
Usage: $_FILENAME [options] {-c|-u|-p|-s} ID
Fully archive a YouTube entity (channel, playlist, video). Downloads video,
thumbnails, annotations, subtitles and description.

Requires youtube-dl.

You can download channels, users and playlists and single videos. One of -c, -u,
-p or -s is required.

  Options:
    -c, --channel   treat ID as a channel ID
    -u, --user      treat ID as a username
    -p, --playlist  treat ID as a playlist
    -s, --single    treat ID as a single video
    -d, --dir       directory to download everything into
    -f, --format    youtube-dl video format code (check youtube-dl docs)
    -l, --limit     youtube-dl maximum download speed (e.g. 100K, 1M)
    -v, --verbose   be verbose
    -h, --help      display this help text and exit\
"

base_url="https://youtube.com"

# defaults
_VERBOSE=1           # force verbosity
max_dl_speed="100K"  # very low limit in order not to disrupt others
video_format_code="bestvideo+bestaudio/best"

while getopts_long :vhcupsd:f:l: opt \
    verbose 0 \
    help 0 \
    channel 0 \
    user 0 \
    playlist 0 \
    single 0 \
    dir 1 \
    format 1 \
    limit 1 \
    "" "$@"
do
    case "$opt" in
        v|verbose) _VERBOSE=$(($_VERBOSE+1)) ;;
        h|help) _print_usage 0 ;;
        :) _err "$OPTLERR" ; _print_usage 1 ;;

        c|channel)  yt_entity_type="channel"  ;;
        u|user)     yt_entity_type="user"     ;;
        p|playlist) yt_entity_type="playlist" ;;
        s|single)   yt_entity_type="single"   ;;

        d|dir) out_dir="$OPTLARG" ;;
        f|format) video_format_code="$OPTLARG" ;;
        l|limit) max_dl_speed="$OPTLARG" ;;
    esac
done
shift $((OPTLIND-1))

if [[ $# != 1 ]]; then
    _err "expected exactly 1 argument (got $#)" 1
fi

# id of channel/user to download
yt_entity_id="$1"

# set a default out dir according to the ID
if [[ -z "$out_dir" ]]; then
    out_dir="yt-archive_${yt_entity_type}_${yt_entity_id}"
fi

log_dir="$out_dir/logs"
dl_archive_file="$out_dir/.yt-dl-archive"
log_file="$log_dir/$(date +%F_%T)-youtube-dl.log"

# form the channel/user URL
if [[ "$yt_entity_type" == "channel" ]]; then
    yt_url="$base_url/channel/$yt_entity_id"
elif [[ "$yt_entity_type" == "user" ]]; then
    yt_url="ytuser:$yt_entity_id"
elif [[ "$yt_entity_type" == "playlist" ]]; then
    yt_url="$base_url/playlist?list=$yt_entity_id"
elif [[ "$yt_entity_type" == "single" ]]; then
    yt_url="$base_url/watch?v=$yt_entity_id"
elif [[ -z "$yt_entity_type" ]]; then
    _err "unable to guess entity type for ID '$yt_entity_id': please specify manually" 2
else
    _err "YouTube entity type '$yt_entity_type' not supported" 2
fi

# make dirs if missing (exit successfully regardless)
mkdir -p "$out_dir" "$log_dir"

youtube-dl -i \
           --limit-rate $max_dl_speed \
           --download-archive "$dl_archive_file" \
           -o "$out_dir/%(upload_date)s-%(title)s-%(id)s.%(ext)s" \
           --playlist-reverse \
           -f "$video_format_code" \
           --write-description \
           --write-all-thumbnails \
           --all-subs \
           --write-info-json \
           --write-annotations \
           "$yt_url" \
           | tee "$log_file"
